/**
 *
 *  
 * 
 * 
 *	
 *
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 */
package org.edu_sharing.repository.server.jobs.quartz;

import org.alfresco.repo.security.authentication.AuthenticationUtil;
import org.alfresco.service.ServiceRegistry;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.cmr.security.PermissionService;
import org.alfresco.service.cmr.security.PersonService;
import org.alfresco.service.namespace.QName;
import org.apache.log4j.Logger;
import org.edu_sharing.alfrescocontext.gate.AlfAppContextGate;
import org.edu_sharing.repository.client.tools.CCConstants;
import org.edu_sharing.repository.server.jobs.helper.NodeRunner;
import org.edu_sharing.repository.server.jobs.quartz.annotation.JobDescription;
import org.edu_sharing.repository.server.jobs.quartz.annotation.JobFieldDescription;
import org.edu_sharing.service.authority.AuthorityService;
import org.edu_sharing.service.authority.AuthorityServiceFactory;
import org.edu_sharing.service.nodeservice.NodeServiceFactory;
import org.edu_sharing.service.nodeservice.NodeServiceHelper;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.context.ApplicationContext;

import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;

@JobDescription(description = "Serialize all metadata of nodes and persistent them as a file")
public class SerializeMetadataJob extends AbstractJob{
	protected Logger logger = Logger.getLogger(SerializeMetadataJob.class);
	@JobFieldDescription(description = "target output filename, when empty will be generated by current timestamp")
	private String filename;
	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {

		ApplicationContext applicationContext = AlfAppContextGate.getApplicationContext();

		ServiceRegistry serviceRegistry = (ServiceRegistry) applicationContext.getBean(ServiceRegistry.SERVICE_REGISTRY);
		NodeRunner runner = new NodeRunner();
		runner.setRunAsSystem(true);
		runner.setTransaction(NodeRunner.TransactionMode.Local);
		runner.setThreaded(false);
		String TMP_DIR = System.getProperty("java.io.tmpdir");
		if(filename==null || filename.isEmpty()) {
			filename = "metadata_export_" + System.currentTimeMillis() + ".bin";
		}
		File file = new File(TMP_DIR, filename);
		try(ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {
			runner.setTask((nodeRef) -> {
				try {
					HashMap<String, Object> props = NodeServiceHelper.getProperties(
							nodeRef
					);
					oos.writeObject(props);
					logger.info("Wrote node " + nodeRef);
				} catch (Throwable e) {
					logger.warn(e.getMessage(), e);
				}
			});
			runner.run();
			logger.info("Wrote data to " +file);
		} catch(Exception e) {
			logger.error(e.getMessage(), e);
		}
	}
}
